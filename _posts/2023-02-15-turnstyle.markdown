---
layout: post
title: Turnstyle
date: 2023-02-15 11:12:00-0400
description: Nerdy cooking mode on.
tags: math programming
categories: idea
hidden: true
---

Naturally, a casual walk on a stimulating work environment can trigger the most prominent forms of [nerd snipping](https://xkcd.com/356/). Another addictive puzzle from the ninth floor dazzled me. Hopefully, I can share some of my curiosity with the reader.    

<center>
<div class="img_row" style="height: 450px;width: 450px">
    <img class="col three" src="{{ site.baseurl }}/assets/img/turnstyle.png" alt="" title="Turnstyle"/>
</div>
</center>

The **[Turnstyle](https://gamewright.com/product/turnstyle)** brain teaser consists of two discs connected by a gear on the back. Allowing two types of valid moves:

- *Shift*  all the numbers one position right (clockwise) or left (counter-clockwise).
- *Flip* the connected gears to change the order the numbers from ABCD to BADC.

After interacting with the puzzle for a few seconds, I knew my best hope was to write a program to find an optimal solution for me. 
{: .text-justify} 

**Let's solve it!**

Being particularly bad at games, I couldn't help but thinking whether I should invest a few hours into it. Naturally, one thought crossed my mind: the imminent fear of a jigsaw puzzle missing a piece. What if someone on purpose designed a devilish unsolvable game? 
{: .text-justify} 

## Mathematical Notions

Let's build up our intution and start with a set of assumptions.

[TODO] 




## Time to code 

From an algorithmic point, the problem consists a graph traversal. 
{: .text-justify} 

{% highlight python %}
import math
import numpy as np
from copy import deepcopy
from collections import deque

# Solution state
solution_state = [i+1 for i in range(n)]
{% endhighlight %}

Function for applying flip operation on the linear array state for the indices [ix%n, (ix+1)%n, (ix+2)%n, (ix+3)%n ] Returns the next state, shifted to have '1' as start of string.
{: .text-justify} 

{% highlight python %}
def flip(state, ix):
    # Copy mutable state variable 
    new_state = state.copy()

    # Swap the elements (ix%n, (ix+1)%n) and (ix+2)%n, (ix+3)%n)
    new_state[ix], new_state[(ix + 1) % n] = (
        new_state[(ix + 1) % n], 
        new_state[ix],
    )
    new_state[(ix + 2) % n], new_state[(ix + 3) % n] = (
        new_state[(ix + 3) % n],
        new_state[(ix + 2) % n],
    )

    # Corner cases for resetting 1 at the beginning of the new state
    if ix == 0 or ix == n - 2:
        new_state = new_state[1:] + [new_state[0]]

    elif ix == n - 3 or ix == n - 1:
        new_state = [new_state[-1]] + new_state[:-1]

    return new_state
{% endhighlight %}




Due to the high number of possible nodes (11! states = ~39M) in the connected graph, a naive implementation of DFS would reach maximum recursion limits. Thus, I opted for using BFS, since that would allow to answer shortest path queries between any initial state to the solved state.
{: .text-justify} 

{% highlight python %}
# Create a set for visited states 
visited = set()

# Keep track of parent states during traversal for path reconstruction
parent = dict()
parent_idx = dict()

# Perform a traversal through the game states graph using BFS algorithm
def bfs(state):

  # Intialization
  initial_state = tuple(state)
  visited.add(initial_state)
  queue = deque([tuple(state)]) 
  parent[initial_state] = tuple(solution_state)
  parent_idx[initial_state] = 0

  # Exploring neighbors not visited
  while queue:
    current_state = list(queue.popleft())
    current_state_tuple = tuple(current_state)
    for i in range(n):
      next_state = tuple(flip(current_state, i))
      if next_state not in visited:
        visited.add(next_state)
        queue.append(next_state)
        parent[next_state] = current_state_tuple
        parent_idx[next_state] = i
{% endhighlight %}


## References

* Turnstyle solution approach via computer search of SWAP - [link](https://www.cs.brandeis.edu/~storer/JimPuzzles/ZPAGES/zzzTurnstyle.html)
* Tom's Turnstile description and puzzle solution by J. A. Storer - [link](https://www.cs.brandeis.edu/~storer/JimPuzzles/SLIDE/TomsTurnstile/TomsTurnstile.pdf)
* Miller, G.A., 'On the groups generated by 2 operators', 1901. - [link](https://www.ams.org/journals/bull/1901-07-10/S0002-9904-1901-00826-9/S0002-9904-1901-00826-9.pdf)
## Acknowledgment
Thanks to Niek Lamoree for the group theory ideas and proofreading this blog post. 
